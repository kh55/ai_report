# AI PRの比率を計算するワークフロー
# 組織内のAI関連PRの割合を週次で計算し、サマリーを出力します
name: ai-pr-org-metrics
on:
  # 毎週月曜日の0:00 UTC（日本時間9:00）に自動実行
  schedule:
    - cron: '0 0 * * 1'   # 月曜 0:00 UTC = 9:00 JST
  # 手動実行の設定
  workflow_dispatch:      # 手動実行を有効化
    inputs:
      start_date:
        description: '開始日 (YYYY-MM-DD)'
        required: false
        type: string
      end_date:
        description: '終了日 (YYYY-MM-DD)'
        required: false
        type: string

jobs:
  # メインの計算ジョブ
  calc:
    runs-on: ubuntu-latest
    steps:
      # 必要なツールのインストール
      - name: Install required tools
        run: |
          if ! command -v jq &> /dev/null; then
            echo "::error::jq is not installed"
            exit 1
          fi
          if ! command -v bc &> /dev/null; then
            echo "::error::bc is not installed"
            exit 1
          fi

      # PRの数を取得するステップ
      - name: Get counts
        id: counts
        env:
          GH_TOKEN: ${{ secrets.METRICS_TOKEN }}  # GitHub APIの認証トークン
          ORG: MyOrg                              # 対象のGitHub組織名
        run: |
          # エラーハンドリング用の関数
          handle_error() {
            echo "::error::$1"
            exit 1
          }

          # 環境変数のチェック
          if [ -z "$GH_TOKEN" ]; then
            handle_error "METRICS_TOKEN is not set"
          fi

          if [ -z "$ORG" ]; then
            handle_error "ORG is not set"
          fi

          # 日付の設定
          # 手動実行で日付が指定された場合はその日付を使用
          # 指定がない場合は前週の月曜日から日曜日を使用
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.start_date }}" ] && [ -n "${{ github.event.inputs.end_date }}" ]; then
            # 日付形式の検証
            if ! date -d "${{ github.event.inputs.start_date }}" >/dev/null 2>&1; then
              handle_error "Invalid start date format: ${{ github.event.inputs.start_date }}"
            fi
            if ! date -d "${{ github.event.inputs.end_date }}" >/dev/null 2>&1; then
              handle_error "Invalid end date format: ${{ github.event.inputs.end_date }}"
            fi
            
            # 日付の順序チェック
            if [ "$(date -d "${{ github.event.inputs.start_date }}" +%s)" -gt "$(date -d "${{ github.event.inputs.end_date }}" +%s)" ]; then
              handle_error "Start date (${{ github.event.inputs.start_date }}) is after end date (${{ github.event.inputs.end_date }})"
            fi

            # 開始日は0時、終了日は23:59:59に設定（日本時間）
            start="${{ github.event.inputs.start_date }}T00:00:00+09:00"
            end="${{ github.event.inputs.end_date }}T23:59:59+09:00"
          else
            # 自動実行時は前週の月曜日0時から日曜日23:59:59（日本時間）
            start=$(date -d 'last week monday' +%FT00:00:00+09:00)
            end=$(date -d 'last week sunday' +%FT23:59:59+09:00)
          fi

          # APIリクエスト用の関数
          make_api_request() {
            local response
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer $GH_TOKEN" "$1")
            local status_code=$(echo "$response" | tail -n1)
            local body=$(echo "$response" | sed '$d')
            
            if [ "$status_code" -ne 200 ]; then
              handle_error "GitHub API request failed with status $status_code: $body"
            fi
            
            echo "$body"
          }

          # AIラベルが付いたマージ済みPRの数を取得
          ai_response=$(make_api_request "https://api.github.com/search/issues?q=org:$ORG+is:pr+is:merged+label:ai+merged:$start..$end")
          ai=$(echo "$ai_response" | jq -r '.total_count')
          if [ "$ai" = "null" ]; then
            handle_error "Failed to parse AI PR count from response: $ai_response"
          fi

          # 全マージ済みPRの数を取得
          all_response=$(make_api_request "https://api.github.com/search/issues?q=org:$ORG+is:pr+is:merged+merged:$start..$end")
          all=$(echo "$all_response" | jq -r '.total_count')
          if [ "$all" = "null" ]; then
            handle_error "Failed to parse total PR count from response: $all_response"
          fi

          # AI PRの比率を計算（小数点第1位まで）
          pct=0; [ "$all" -gt 0 ] && pct=$(echo "scale=1; $ai*100/$all" | bc)

          # 結果をGitHub Actionsの出力に保存
          echo "ai=$ai"   >> $GITHUB_OUTPUT
          echo "all=$all" >> $GITHUB_OUTPUT
          echo "pct=$pct" >> $GITHUB_OUTPUT
          echo "start=$start" >> $GITHUB_OUTPUT
          echo "end=$end" >> $GITHUB_OUTPUT

      # 結果のサマリーを出力するステップ
      - name: Summary
        run: |
          # GitHub Actionsのステップサマリーに結果を出力
          echo "### AI PR 比率 (${{ steps.counts.outputs.start }}–${{ steps.counts.outputs.end }})" >> $GITHUB_STEP_SUMMARY
          echo "- AI PR: ${{ steps.counts.outputs.ai }}" >> $GITHUB_STEP_SUMMARY
          echo "- 全 PR: ${{ steps.counts.outputs.all }}" >> $GITHUB_STEP_SUMMARY
          echo "- 比 率: ${{ steps.counts.outputs.pct }}%" >> $GITHUB_STEP_SUMMARY 