# AI PRの比率を計算するワークフロー
# 組織内のAI関連PRの割合を週次で計算し、サマリーを出力します
name: ai-pr-org-metrics
on:
  # 毎週月曜日の0:00 UTC（日本時間9:00）に自動実行
  schedule:
    - cron: '0 0 * * 1'   # 月曜 0:00 UTC = 9:00 JST
  # 手動実行の設定
  workflow_dispatch:      # 手動実行を有効化
    inputs:
      start_date:
        description: '開始日 (YYYY-MM-DD)'
        required: false
        type: string
      end_date:
        description: '終了日 (YYYY-MM-DD)'
        required: false
        type: string
      ai_labels:
        description: 'AI関連PRのラベル（カンマ区切り）'
        required: false
        type: string
        default: 'ai,ai-generated,ai-assist'

jobs:
  # メインの計算ジョブ
  calc:
    runs-on: ubuntu-latest
    steps:
      # 必要なツールのインストール
      - name: Install required tools
        run: |
          if ! command -v jq &> /dev/null; then
            echo "::error::jq is not installed"
            exit 1
          fi
          if ! command -v bc &> /dev/null; then
            echo "::error::bc is not installed"
            exit 1
          fi

      # PRの数を取得するステップ
      - name: Get counts
        id: counts
        env:
          GH_TOKEN: ${{ secrets.METRICS_TOKEN }}  # GitHub APIの認証トークン
          OWNER: ${{ github.repository_owner }}    # リポジトリのオーナー
          AI_LABELS: ${{ github.event.inputs.ai_labels || 'ai,ai-generated,ai-assist' }}  # AI関連PRのラベル
        run: |
          # エラーハンドリング用の関数
          handle_error() {
            echo "::error::$1"
            exit 1
          }

          # 環境変数のチェック
          if [ -z "$GH_TOKEN" ]; then
            handle_error "METRICS_TOKEN is not set"
          fi

          if [ -z "$OWNER" ]; then
            handle_error "OWNER is not set"
          fi

          # AIラベルの設定
          # カンマ区切りのラベルを "label:ai OR label:ai-generated" 形式に変換
          # 大文字小文字を区別しないように、各ラベルを小文字に変換
          label_query=$(echo "$AI_LABELS" | tr '[:upper:]' '[:lower:]' | tr ',' '\n' | sed 's/^/label:/' | paste -sd ' OR ' -)

          # 日付の設定
          # 手動実行で日付が指定された場合はその日付を使用
          # 指定がない場合は前週の月曜日から日曜日を使用
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.start_date }}" ] && [ -n "${{ github.event.inputs.end_date }}" ]; then
            # 日付形式の検証
            if ! date -d "${{ github.event.inputs.start_date }}" >/dev/null 2>&1; then
              handle_error "Invalid start date format: ${{ github.event.inputs.start_date }}"
            fi
            if ! date -d "${{ github.event.inputs.end_date }}" >/dev/null 2>&1; then
              handle_error "Invalid end date format: ${{ github.event.inputs.end_date }}"
            fi
            
            # 日付の順序チェック
            if [ "$(date -d "${{ github.event.inputs.start_date }}" +%s)" -gt "$(date -d "${{ github.event.inputs.end_date }}" +%s)" ]; then
              handle_error "Start date (${{ github.event.inputs.start_date }}) is after end date (${{ github.event.inputs.end_date }})"
            fi

            # 開始日は0時、終了日は23:59:59に設定（日本時間）
            start="${{ github.event.inputs.start_date }}T00:00:00+09:00"
            end="${{ github.event.inputs.end_date }}T23:59:59+09:00"
          else
            # 自動実行時は前週の月曜日0時から日曜日23:59:59（日本時間）
            start=$(date -d 'last week monday' +%FT00:00:00+09:00)
            end=$(date -d 'last week sunday' +%FT23:59:59+09:00)
          fi

          # APIリクエスト用の関数
          make_api_request() {
            local url=$1
            local response
            echo "::debug::Making API request to: $url" >&2
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" "$url")
            local status_code=$(echo "$response" | tail -n1)
            local body=$(echo "$response" | sed '$d')
            
            echo "::debug::Response status code: $status_code" >&2
            echo "::debug::Response body: $body" >&2
            
            if [ "$status_code" -ne 200 ]; then
              handle_error "GitHub API request failed with status $status_code: $body"
            fi
            
            # JSONの検証
            if ! echo "$body" | jq -e . >/dev/null 2>&1; then
              handle_error "Invalid JSON response: $body"
            fi
            
            echo "$body"
          }

          # ユーザーのリポジトリ一覧を取得
          echo "Fetching repositories for user: $OWNER"
          repos_response=$(make_api_request "https://api.github.com/users/$OWNER/repos?per_page=100")
          
          # レスポンスの検証
          if ! echo "$repos_response" | jq -e . >/dev/null 2>&1; then
            handle_error "Invalid JSON response from GitHub API: $repos_response"
          fi
          
          repos=$(echo "$repos_response" | jq -r '.[].name')
          
          if [ -z "$repos" ]; then
            handle_error "No repositories found for user: $OWNER"
          fi

          echo "Found repositories:"
          echo "$repos"

          # リポジトリごとの結果を格納する配列
          declare -A repo_ai_counts
          declare -A repo_all_counts
          total_ai=0
          total_all=0

          # 各リポジトリのPR数を取得
          for repo in $repos; do
            echo "Processing repository: $repo"
            
            # AIラベルが付いたマージ済みPRの数を取得
            ai_query="https://api.github.com/search/issues?q=repo:$OWNER/$repo+is:pr+is:merged+($label_query)+merged:$start..$end"
            echo "::debug::AI PR query: $ai_query" >&2
            ai_response=$(make_api_request "$ai_query")
            
            # レスポンスの検証
            if ! echo "$ai_response" | jq -e . >/dev/null 2>&1; then
              handle_error "Invalid JSON response for AI PR count: $ai_response"
            fi
            
            ai_count=$(echo "$ai_response" | jq -r '.total_count')
            if [ "$ai_count" = "null" ]; then
              echo "::warning::No AI PR count found for repo $repo, using 0"
              ai_count=0
            fi
            echo "AI PR count for $repo: $ai_count"
            repo_ai_counts[$repo]=$ai_count
            total_ai=$((total_ai + ai_count))

            # 全マージ済みPRの数を取得
            all_query="https://api.github.com/search/issues?q=repo:$OWNER/$repo+is:pr+is:merged+merged:$start..$end"
            echo "::debug::All PR query: $all_query" >&2
            all_response=$(make_api_request "$all_query")
            
            # レスポンスの検証
            if ! echo "$all_response" | jq -e . >/dev/null 2>&1; then
              handle_error "Invalid JSON response for total PR count: $all_response"
            fi
            
            all_count=$(echo "$all_response" | jq -r '.total_count')
            if [ "$all_count" = "null" ]; then
              echo "::warning::No total PR count found for repo $repo, using 0"
              all_count=0
            fi
            echo "Total PR count for $repo: $all_count"
            repo_all_counts[$repo]=$all_count
            total_all=$((total_all + all_count))
          done

          # 全体のAI PRの比率を計算（小数点第1位まで）
          total_pct=0; [ "$total_all" -gt 0 ] && total_pct=$(echo "scale=1; $total_ai*100/$total_all" | bc)

          # 結果をGitHub Actionsの出力に保存
          echo "total_ai=$total_ai" >> $GITHUB_OUTPUT
          echo "total_all=$total_all" >> $GITHUB_OUTPUT
          echo "total_pct=$total_pct" >> $GITHUB_OUTPUT
          echo "start=$start" >> $GITHUB_OUTPUT
          echo "end=$end" >> $GITHUB_OUTPUT
          echo "labels=$AI_LABELS" >> $GITHUB_OUTPUT

          # リポジトリごとの結果をJSON形式で保存
          repo_results="{}"
          for repo in $repos; do
            ai_count=${repo_ai_counts[$repo]}
            all_count=${repo_all_counts[$repo]}
            pct=0; [ "$all_count" -gt 0 ] && pct=$(echo "scale=1; $ai_count*100/$all_count" | bc)
            repo_results=$(echo "$repo_results" | jq --arg repo "$repo" \
              --arg ai "$ai_count" \
              --arg all "$all_count" \
              --arg pct "$pct" \
              '. + {($repo): {"ai": $ai, "all": $all, "pct": $pct}}')
          done
          echo "repo_results=$repo_results" >> $GITHUB_OUTPUT

      # 結果のサマリーを出力するステップ
      - name: Summary
        run: |
          # GitHub Actionsのステップサマリーに結果を出力
          echo "### AI PR 比率 (${{ steps.counts.outputs.start }}–${{ steps.counts.outputs.end }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 全体" >> $GITHUB_STEP_SUMMARY
          echo "- AI PR: ${{ steps.counts.outputs.total_ai }}" >> $GITHUB_STEP_SUMMARY
          echo "- 全 PR: ${{ steps.counts.outputs.total_all }}" >> $GITHUB_STEP_SUMMARY
          echo "- 比 率: ${{ steps.counts.outputs.total_pct }}%" >> $GITHUB_STEP_SUMMARY
          echo "- 対象ラベル: ${{ steps.counts.outputs.labels }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### リポジトリ別" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.counts.outputs.repo_results }}" | jq -r 'to_entries | .[] | "- **\(.key)**: AI PR: \(.value.ai), 全 PR: \(.value.all), 比率: \(.value.pct)%"' >> $GITHUB_STEP_SUMMARY 